---
title: "RNAseq analysis - analysis of comparison"
author: "TP"
date: "2024-12-02"
output: html_document
---

# 0. Preperations
## Load packages


## Functions

### ... DEGO
enrichment analysis for GO terms
```{r}
DEGO<-function(input = list_degenes, 
               p.cutoff = 0.1, show_cat = 50){
  
  listgo_de<-list()
  listgo_de_info<-list()
  listgo_de_res<-list()
  
  for (i in 1:length(input)){
    
    namei<-names(input)[i]
    print(namei)
    gene_down_i<-input[[i]]$down
    gene_up_i<-input[[i]]$up
    
    
    ## downregulated genes
    
    listgo_de[[paste0(namei,"_down")]]<-NA # plot
    listgo_de_info[[paste0(namei,"_down")]]<-NA # results table
    listgo_de_res[[namei]]$down<-NA # enrichment results
    
    
    
    
  
    if(length(gene_down_i)!=0){
      # trabsfirn to entrez
      gene_entrez_down_i<-bitr(gene_down_i,
                               fromType = "SYMBOL",
                               toType="ENTREZID", 
                               OrgDb="org.Hs.eg.db")$ENTREZID
      
      # enrichment + plot
      if (length(gene_entrez_down_i)!=0){
        
      
      # enrichment
      go_enrich_down_i<-enrichGO(gene = gene_entrez_down_i,
                                 OrgDb = org.Hs.eg.db,
                                 keyType = 'ENTREZID',
                                 ont = 'BP',
                                 pAdjustMethod = 'BH',
                                 pvalueCutoff = p.cutoff,
                                 #qvalueCutoff = 0.05,
                                 readable = TRUE,universe = universe_Entrez)
      
      # plot
      if (!is.null(go_enrich_down_i)){
        df_dn<- go_enrich_down_i@result
        df_dn<-df_dn[df_dn$p.adjust<p.cutoff,]
        
        plotgo<-dotplot(go_enrich_down_i, showCategory=show_cat) + ggtitle(paste0("GOEA down ",namei)) 
        
        ## save in list
        listgo_de[[paste0(namei,"_down")]]<-plotgo # plot
        listgo_de_info[[paste0(namei,"_down")]]<- df_dn # results table
        listgo_de_res[[namei]]$down<-go_enrich_down_i # enrichment results
      } else {
        
        # if there is no enrichment
        listgo_de[[paste0(namei,"_down")]]<-NA # plot
        listgo_de_info[[paste0(namei,"_down")]]<-NA # results table
        listgo_de_res[[namei]]$down<-go_enrich_down_i # enrichment results
      }
      
      }
    }
 
     
    ## upregulated genes
    
    listgo_de[[paste0(namei,"_up")]]<-NA # plot
    listgo_de_info[[paste0(namei,"_up")]]<-NA # results table
    listgo_de_res[[namei]]$up<-NA # enrichment results
    
    # enrichment
    if(length(gene_up_i)!=0){
      
      # transfer to entrez id
      gene_entrez_up_i<-bitr(gene_up_i,
                             fromType = "SYMBOL",
                             toType="ENTREZID", 
                             OrgDb="org.Hs.eg.db")$ENTREZID
      
      if (length(gene_entrez_up_i) != 0){
        
        go_enrich_up_i<-enrichGO(gene = gene_entrez_up_i,
                                 OrgDb = org.Hs.eg.db,
                                 keyType = 'ENTREZID',
                                 ont = 'BP',
                                 pAdjustMethod = 'BH',
                                 pvalueCutoff = p.cutoff,
                                 #qvalueCutoff = 0.05,
                                 readable = TRUE,universe = universe_Entrez)
      # plot
      if (!is.null(go_enrich_up_i)){
        df_up<- go_enrich_up_i@result
        df_up<-df_up[df_up$p.adjust<p.cutoff,]
        
        plotgo<-dotplot(go_enrich_up_i, showCategory=show_cat) + ggtitle(paste0("GOEA up ",namei)) 
        
        ## save in list
        listgo_de[[paste0(namei,"_up")]]<-plotgo # plot
        listgo_de_info[[paste0(namei,"_up")]]<- df_up # results table
        listgo_de_res[[namei]]$up<-go_enrich_up_i # enrichment results
      } else {
        
        # if there is no enrichment
        listgo_de[[paste0(namei,"_up")]]<-NA # plot
        listgo_de_info[[paste0(namei,"_up")]]<-NA # results table
        listgo_de_res[[namei]]$up<-go_enrich_up_i # enrichment results
      }
      
      }
      
    }

  }
  
  
  output<-list(listgo = listgo_de, listgo_info = listgo_de_info, listgo_res = listgo_de_res)
  output
  
}
```

### ... TF overrepresentation
```{r}
TF_overrep <- function(topTF = 5, # or "all"
                       topTarget = 5,# or "all"
                       input = "DEresults",
                       inputdata = DEresults, 
                       fullDEobj = TRUE, 
                       include_targets = "both" 
                       ) {
  
  require(httr)
  require(jsonlite)
  url = "https://amp.pharm.mssm.edu/chea3/api/enrich/"
  encode = "json"
  output <- list()
  
  if (input == "DEresults"){
    if (fullDEobj == TRUE){
      inputdata = inputdata[2:length(inputdata)]
    } else {
      inputdata = inputdata
    }
    
    for (c in unique(names(inputdata))) {
      print(c)
      genesup <-
        c(inputdata[[c]]@DE_genes$up_regulated_Genes[, "SYMBOL"])
      genesdn <-
        c(inputdata[[c]]@DE_genes$down_regulated_Genes[, "SYMBOL"])
      
      # both but all genes are NULL
      if (include_targets == "both" & length(c(genesup, genesdn))<=1) {
        output[[c]] <- NULL
        next
      }
      # one, and all genes are null
      if (include_targets == "one" &
          length(genesup) <=1 & length(genesdn)<=1) {
        output[[c]] <- NULL
        next
      }
      
      # both but only one geneset is NULL
      if (include_targets == "both" ) {
        #POST to ChEA3 server- algenesdnl genes
        payload = list(query_name = "myQuery",
                       gene_set = c(genesup, genesdn))
        response = POST(url = url,
                        body = payload,
                        encode = encode)
        json = httr::content(response, as = "text")
        # resultsall
        resultsall = fromJSON(json)
        resultsall = resultsall$`Integrated--meanRank`
        resultsall$regulation_TF <-
          ifelse(resultsall$TF %in% genesup, "up", "down")
      } 
      
      if (include_targets == "one") {
        if (length(genesup)>1) {
          payload_up = list(query_name = "myQuery", gene_set = genesup)
          response_up = POST(url = url,
                             body = payload_up,
                             encode = encode)
          json_up = httr::content(response_up, as = "text")
          #results as list of R dataframes
          results_up = fromJSON(json_up)
          results_up <- results_up$`Integrated--meanRank`
          results_up$regulation <- "up"
          results_up = results_up[which(results_up$TF %in% genesup),]
        } else {
          resultlist$up <- NULL
        }
       
        if (length(genesdn)>1) {
          #down
          payload_dn = list(query_name = "myQuery", gene_set = genesdn)
          response_dn = POST(url = url,
                             body = payload_dn,
                             encode = encode)
          json_dn = httr::content(response_dn, as = "text")
          #downregulated genes
          results_dn = fromJSON(json_dn)
          results_dn <- results_dn$`Integrated--meanRank`
          results_dn$regulation <- "down"
          results_dn = results_dn[which(results_dn$TF %in% genesdn),]
        } else {
          results_dn <- NULL
        }
        resultsall <- rbind(results_up, results_dn)
        
      }
      
      
      # extract those from meanRank since meanRank scored as best method:
      resultlist <- list()
      # sepeate up and down
      res_up <- resultsall[resultsall$regulation == "up", ]
      res_dn <- resultsall[resultsall$regulation == "down", ]
      
      if (topTarget == "all"){
        tt<- TRUE
      } else {
        tt = 1:topTarget
      }
      
      if (topTF !="all"){
      if (is.character(topTF)){
        for (i in topTF){
          tf_up <- i
          overlapping_genes_up <- res_up[res_up$TF==i,"Overlapping_Genes"] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tarup<-overlapping_genes_up[tt]
          resultlist$up[[tf_up]] <-list(TF = tf_up, targets = tarup[!is.na(tarup)])
          tf_dn <- i
          overlapping_genes_dn <- res_dn[res_dn$TF==i,"Overlapping_Genes"] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tardn<- overlapping_genes_dn[tt]
          resultlist$down[[tf_dn]] <-
            list(TF = tf_dn, targets = tardn[!is.na(tardn)])
        } 
      }else {
        for (i in 1:topTF) {
          tf_up <- res_up$TF[i]
          overlapping_genes_up <- res_up$Overlapping_Genes[i] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tarup<-overlapping_genes_up[tt]
          resultlist$up[[tf_up]] <-list(TF = tf_up, targets = tarup[!is.na(tarup)])
          tf_dn <- res_dn$TF[i]
          overlapping_genes_dn <- res_dn$Overlapping_Genes[i] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tardn<- overlapping_genes_dn[tt]
          resultlist$down[[tf_dn]] <-
            list(TF = tf_dn, targets = tardn[!is.na(tardn)])
        }
      }
      } else {
        for (i in 1:nrow(res_up)) {
          tf_up <- res_up$TF[i]
          overlapping_genes_up <- res_up$Overlapping_Genes[i] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tarup<-overlapping_genes_up[tt]
          resultlist$up[[tf_up]] <-list(TF = tf_up, targets = tarup[!is.na(tarup)])
        }
        for (j in 1:nrow(res_dn)){
          tf_dn <- res_dn$TF[j]
          overlapping_genes_dn <- res_dn$Overlapping_Genes[j] %>%
            base::strsplit(., split = ",") %>%
            unlist(.)
          tardn<- overlapping_genes_dn[tt]
          resultlist$down[[tf_dn]] <-
            list(TF = tf_dn, targets = tardn[!is.na(tardn)])
        }
        }
      output[[c]] <- resultlist
    }
  } else if (input !="DEresults" & is.character(inputdata)) {
    #POST to ChEA3 server- algenesdnl genes
    payload = list(query_name = "myQuery",
                   gene_set = inputdata)
    response = POST(url = url,
                    body = payload,
                    encode = encode)
    json = httr::content(response, as = "text")
    # resultsall
    resultsall = fromJSON(json)
    resultsall = resultsall$`Integrated--meanRank`
    resultsall = resultsall[which(resultsall$TF %in% inputdata),]
    
    resultlist <- list()
    
    if (topTarget == "all"){
      tt<- TRUE
    } else {
      tt = 1:topTarget
    }
    
    if (topTF !="all"){
    if (is.character(topTF)){
      for (i in topTF){
        tfa <- i
        overlapping_genes <- resultsall[resultsall$TF==i,"Overlapping_Genes"] %>%
          base::strsplit(., split = ",") %>%
          unlist(.)
        tar<-overlapping_genes[tt]
        resultlist[[tfa]] <-list(TF = tfa, targets = tar[!is.na(tar)])
      } 
    } else {
      for (i in 1:topTF) {
        tfa <- resultsall$TF[i]
        overlapping_genes <- resultsall$Overlapping_Genes[i] %>%
          base::strsplit(., split = ",") %>%
          unlist(.)
        tar<-overlapping_genes[tt]
        resultlist[[tfa]] <-list(TF = tfa, targets = tar[!is.na(tar)])
      }
    }
    } else {
      for (i in 1:nrow(resultsall)) {
        tf_up <- resultsall$TF[i]
        overlapping_genes_up <- resultsall$Overlapping_Genes[i] %>%
          base::strsplit(., split = ",") %>%
          unlist(.)
        tarup<-overlapping_genes_up[tt]
        resultlist[[tf_up]] <-list(TF = tf_up, targets = tarup[!is.na(tarup)])
      }
    }
    output <- resultlist
  } else {
    print("use as input DEresults or another charachter vector")
  }
  return(output)    
    
  }
```

### ... TF plot
```{r}
plot_TF_enrichment <- function(overrep_results, 
                               type= "individual", #choose integrated or individual
                               input = "DEresults",
                               source = DEresults, 
                               colorup = "tomato2",
                                 colordn = "cornflowerblue",
                               main_title = title
                               ){
  require(circlize)
  
  if (input == "DEresults"){
    dflist <- list()
    TFs <- NULL
    for(c in names(overrep_results)){
      print(c)
      genesup<- as.character(source[[c]]@DE_genes$up_regulated_Genes[,"SYMBOL"])
      genesdown<- as.character(source[[c]]@DE_genes$down_regulated_Genes[,"SYMBOL"])
      tmp<-NULL
      
      #up
      for(t in  names(overrep_results[[c]]$up)[!is.na(names(overrep_results[[c]]$up))]){
        TFs <- c(TFs, t)
        tmp_df_up <- data.frame(TF = rep(t, length(overrep_results[[c]][["up"]][[t]][["targets"]])),
                                Target = overrep_results[[c]][["up"]][[t]][["targets"]],
                                regulation = rep("up", length(overrep_results[[c]][["up"]][[t]][["targets"]])),
                                colorTF = rep (colorup,length(overrep_results[[c]][["up"]][[t]][["targets"]])),
                                colorTarget = ifelse(overrep_results[[c]][["up"]][[t]][["targets"]] %in% genesup,colorup,colordn ))
        #tmp_df <- merge(tmp_df, gtc, by.x = "Target", by.y = "gene")
        colnames(tmp_df_up) <- c("TF", "Target", "regulation", "colorTF","colorTarget")
        tmp <- rbind(tmp, tmp_df_up)
      } 
      #down
      for(t in names(overrep_results[[c]]$down)[!is.na(names(overrep_results[[c]]$down))]){
        TFs <- c(TFs, t)
        tmp_df_down <- data.frame(TF = rep(t, length(overrep_results[[c]][["down"]][[t]][["targets"]])),
                                  Target = overrep_results[[c]][["down"]][[t]][["targets"]],
                                  regulation = rep("down", length(overrep_results[[c]][["down"]][[t]][["targets"]])),
                                  colorTF = rep (colordn,length(overrep_results[[c]][["down"]][[t]][["targets"]])),
                                  colorTarget = ifelse(overrep_results[[c]][["down"]][[t]][["targets"]] %in% genesup,colorup,colordn ))
        #tmp_df <- merge(tmp_df, gtc, by.x = "Target", by.y = "gene")
        #colnames(tmp_df_down) <- c("TF", "Target",  "regulation", "colorTF","colorTarget")
        tmp <- rbind(tmp, tmp_df_down)
      }
    
    # add table of results to output list  
    dflist[[c]] <- tmp
    }
    
    #vector of all TF
    TFs <- unique(as.character(TFs))
    
    
    #create directory
    dir.create(paste0(dir,"/circos.plots"), recursive = T)
    
    #open session for pdf
    Cairo::CairoPDF(file =paste0(dir,"/circos.plots/",gsub(":","-",as.character(Sys.time())),"circos_plots.pdf"), width = 12,
                    height = 7, onefile = T)
    # loop in pairs of two to create douple plots:
    if (type != "together" ){
      n_plots<-length(dflist)
    }else {
      n_plots<-2*(length(dflist))
    }
    
    
      # i1 <- n_plots*2-1
      # i2 <- n_plots*2
      # set layout to plot two plots each in horizontal arrangement
      layout(matrix(1:2, 1, 2))
      
      

        for(j in 1:n_plots){
          # catching 'out-of-bounds':
          # if(j > length(overrep_results)){
          #   break
          # }
          
          if (type != "together"){
            for (e in c("up","down")){
              # create link data frame:
              fromto <- dflist[[j]]
              fromto <- fromto[fromto$regulation == e,]
              # only consider no TF targets:
              fromto <- dplyr::filter(fromto, !Target %in% TFs)
              fromto <- fromto[complete.cases(fromto),]
              fromto <- unique(fromto)
              
              
              # dataframe that associates each gene with its clsuter colour:
              NodeToColor <- rbind(data.frame(gene = fromto$TF, color = fromto$colorTF),
                                   data.frame(gene = fromto$Target, color = fromto$colorTarget))%>%
                unique()
              
              # create plot factors:
              factors <- unique(as.character(NodeToColor$gene))
              circos.par(points.overflow.warning=FALSE)
              circos.initialize(factors, xlim = c(0, 1))
              circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = as.character(NodeToColor$color),
                                     bg.border = NA )
              # add sector labels:
              g <- circos.trackPlotRegion(track.index = 1, panel.fun = function(x,y){
                xlim = get.cell.meta.data("xlim")
                ylim = get.cell.meta.data("ylim")
                sector.name = get.cell.meta.data("sector.index")
                
                if(sector.name %in% TFs){
                  circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9,
                              col = "turquoise3", font = 2)
                }else{
                  circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9)
                }
                
              })
              
              # add links
              for(i in 1:nrow(fromto)) {
                g <- circos.link(sector.index1 =  as.character(fromto[i,1]), c(0.45, 0.55),
                                 sector.index2 =  as.character(fromto[i,2]), c(.92),
                                 col = as.character(fromto[i,4]),
                                 directional = 1,
                                 arr.width = .1,
                                 arr.length = .1)
                
                
              }
              title(paste0(names(overrep_results)[j],"_",e))
              circos.clear()  
            }
          } else {
            # create link data frame:
            fromto <- dflist[[j]]
            # only consider no TF targets:
            fromto <- dplyr::filter(fromto, !Target %in% TFs)
            fromto <- fromto[complete.cases(fromto),]
            fromto <- unique(fromto)
            
            
            # dataframe that associates each gene with its clsuter colour:
            NodeToColor <- rbind(data.frame(gene = fromto$TF, color = fromto$colorTF),
                                 data.frame(gene = fromto$Target, color = fromto$colorTarget))%>%
              unique()
            
            # create plot factors:
            factors <- unique(as.character(NodeToColor$gene))
            circos.par(points.overflow.warning=FALSE)
            circos.initialize(factors, xlim = c(0, 1))
            circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = as.character(NodeToColor$color),
                                   bg.border = NA )
            # add sector labels:
            g <- circos.trackPlotRegion(track.index = 1, panel.fun = function(x,y){
              xlim = get.cell.meta.data("xlim")
              ylim = get.cell.meta.data("ylim")
              sector.name = get.cell.meta.data("sector.index")
              
              if(sector.name %in% TFs){
                circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9,
                            col = "turquoise3", font = 2)
              }else{
                circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9)
              }
              
            })
            
            # add links
            for(i in 1:nrow(fromto)) {
              g <- circos.link(sector.index1 =  as.character(fromto[i,1]), c(0.45, 0.55),
                               sector.index2 =  as.character(fromto[i,2]), c(.92),
                               col = as.character(fromto[i,4]),
                               directional = 1,
                               arr.width = .1,
                               arr.length = .1)
              
              
            }
            title(names(overrep_results)[j])
            circos.clear()  
          }
      } 
        
      } else {
    dflist <- list()
    TFs <- NULL
    tmp<-NULL
    for(t in names(overrep_results)[!is.na(names(overrep_results))]){
        TFs <- c(TFs, t)
        tmp_df_up <- data.frame(TF = rep(t, length(overrep_results[[t]][["targets"]])),
                                Target = overrep_results[[t]][["targets"]],
                                compareTF = rep("up", length(overrep_results[[t]][["targets"]])),
                                colorTF = rep (colorup,length(overrep_results[[t]][["targets"]])),
                                colorTarget = rep (colorup,length(overrep_results[[t]][["targets"]])))
        #tmp_df <- merge(tmp_df, gtc, by.x = "Target", by.y = "gene")
        colnames(tmp_df_up) <- c("TF", "Target", "regulation", "colorTF","colorTarget")
        tmp <- rbind(tmp, tmp_df_up)
      }
      
      dflist[["vec"]] <- tmp
      
    
    TFs <- unique(as.character(TFs))
    
    
    #create directory
    dir.create(paste0(dir,"/circos.plots"), recursive = T)
    
    #open session for pdf
    Cairo::CairoPDF(file =paste0(dir,"/circos.plots/",gsub(":","-",as.character(Sys.time())),"circos_plots.pdf"), width = 12,
                    height = 7, onefile = T)
    # create just one plot
    n_plots = 1
    
      # set layout to plot two plots each in horizontal arrangement
      layout(matrix(1:2, 1, 2))

          
          # create link data frame:
          fromto <- dflist[["vec"]]
          # only consider no TF targets:
          fromto <- dplyr::filter(fromto, !Target %in% TF)
          fromto <- fromto[complete.cases(fromto),]
          fromto <- unique(fromto)
          
          
          # dataframe that associates each gene with its clsuter colour:
          NodeToColor <- rbind(data.frame(gene = fromto$TF, color = fromto$colorTF),
                               data.frame(gene = fromto$Target, color = fromto$colorTarget))%>%
            unique()
          
          # create plot factors:
          factors <- unique(as.character(NodeToColor$gene))
          circos.par(points.overflow.warning=FALSE)
          circos.initialize(factors, xlim = c(0, 1))
          circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = as.character(NodeToColor$color),
                                 bg.border = NA )
          # add sector labels:
          g <- circos.trackPlotRegion(track.index = 1, panel.fun = function(x,y){
            xlim = get.cell.meta.data("xlim")
            ylim = get.cell.meta.data("ylim")
            sector.name = get.cell.meta.data("sector.index")
            
            if(sector.name %in% TFs){
              circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9,
                          col = "turquoise3", font = 2)
            }else{
              circos.text(mean(xlim), mean(ylim)+2.5, sector.name, facing = "inside", niceFacing = T, cex = .9)
            }
            
          })
          # add links
          for(i in 1:nrow(fromto)) {
            g <- circos.link(sector.index1 =  as.character(fromto[i,1]), c(0.45, 0.55),
                             sector.index2 =  as.character(fromto[i,2]), c(.92),
                             col = as.character(fromto[i,4]),
                             directional = 1,
                             arr.width = .1,
                             arr.length = .1)
            
          
            
          }
          title(main_title)
          circos.clear() 
}

  dev.off()
  dflist[["plot"]] <- g 
  return(dflist)
}
```

# 1. Data
## 1.1. sample table


```{r}
sample_table_urban_0.14 <- sample_table_all[sample_table_all$diet == "urban_diet",]
sample_table_urban_0.14 <- sample_table_urban_0.14[sample_table_urban_0.14$timepoint != "30d", ]

## exclude outliers
sample_table_urban_0.14 <- sample_table_urban_0.14[which(!as.character(sample_table_urban_0.14$ID) %in% outliers), ]
```

```{r}
ggplot(sample_table_urban_0.14, aes(x= timepoint, y= PID, color = diet))+
  geom_point()+
  geom_line(aes(group = PID))
```
### leave only paired samples
DSR16 doesn't have a pair

```{r}
sample_table_urban_0.14 <- sample_table_urban_0.14[which(!as.character(sample_table_urban_0.14$PID) %in% "DSR16"),]


ggplot(sample_table_urban_0.14, aes(x= timepoint, y= PID, color = diet))+
  geom_point()+
  geom_line(aes(group = PID))
```
```{r}
table(sample_table_urban_0.14$timepoint, sample_table_urban_0.14$treatment)
```


## 1.2. STAR aligned counts
```{r}
library(stringr)
star.count <- read.table(file = file.path("alignment", "all_samples.tsv"), row.names = 1, header = T, stringsAsFactors = F )

# remove the letter X in the beginning of the seq IDs
names(star.count)=str_sub(names(star.count),2)

star.count.urban_0.14 <- star.count[,match(as.character(sample_table_urban_0.14$ID), colnames(star.count))]
```



# 2. match
```{r}
identical(as.character(sample_table_urban_0.14$ID), colnames(star.count.urban_0.14))
```

# 3. create paired model

#### relevel 
```{r}
sample_table_urban_0.14$timepoint <- factor(sample_table_urban_0.14$timepoint, levels = c("0d","14d"))
```

#### add ind.n

analysis of group-specific condition effects
For object construction, you can use a simple design, such as ~ ind + cnd, as long as you remember to replace it before running DESeq. Then add a column ind.n which distinguishes the individuals nested within a group. Here, we add this column to coldata, but in practice you would add this column to dds.


```{r}
ctr <- unique(subset(sample_table_urban_0.14, treatment == "ctr")$PID)
names(ctr) <- c(1:length(ctr))


diet <- unique(subset(sample_table_urban_0.14, treatment == "diet")$PID)
names(diet) <- c(1:length(diet))

names_ctr_diet <- c(ctr,diet)

sample_table_urban_0.14$ind.n <- names(names_ctr_diet[match(as.character(sample_table_urban_0.14$PID), as.character(names_ctr_diet))])

sample_table_urban_0.14$ind.n <- factor(sample_table_urban_0.14$ind.n) 
```

```{r}
model.matrix(~ treatment + treatment:ind.n + treatment:timepoint, sample_table_urban_0.14)
```
if you have unbalanced numbers of individuals in the two groups, you will have zeros for some of the interactions between grp and ind.n. You can remove these columns manually from the model matrix and pass the corrected model matrix to the full argument of the DESeq function. See example code in the next section. Note that, in this case, you will not be able to create the DESeqDataSet with the design that leads to less than full rank model matrix. 
```{r}
model <- model.matrix(~ treatment + treatment:ind.n + treatment:timepoint, sample_table_urban_0.14)

## remove only zero columns

model <- model[,colSums(model)>0]

model
```

# 4. DESeqDataSetFromMatrix

```{r DESeqDataSetFromMatrix urban diet 0d vs 14d }
dds_txi <- NULL

dds_txi_urban.014 <- DESeqDataSetFromMatrix(countData = star.count.urban_0.14,  
                                  colData = sample_table_urban_0.14, 
                                  design = ~ timepoint)


#rm(star.count)
```

#### insert full model
```{r}
design(dds_txi_urban.014) <- model

```

# 5. Pre-filtering



*Note that more strict filtering to increase power is automatically applied via independent filtering or independent hypothesis weighting on the mean of normalized counts within the results function.*
```{r}
gene_annotation <- tx_annotation[!duplicated(tx_annotation$GENEID),c("GENEID", "SYMBOL", "GENETYPE")]

```

```{r}
table(sample_table_urban_0.14[,c("timepoint","treatment")])
```

### filtering genes
```{r filter genes urban diet 0 vs 14}
genes_to_keep <- NULL
# filtering genes that have below 10 counts in more than certain number of participants. 
# option 1 - the cut off number is the median number of participants per analysis group (deseq_model_parameter)
genes_to_keep <- genes_to_keep <- rowSums(counts(dds_txi_urban.014) >= 10) >= 5

nrow(dds_txi_urban.014)


sum(genes_to_keep)
```

**Number of genes after filtering is:** `r sum(genes_to_keep) `


```{r}
dds_urban_diet_014 <- dds_txi_urban.014[genes_to_keep,]
```



remove hb/ribo
```{r}
genes <- rownames(dds_urban_diet_014)
length(genes)
 non_hb_ribo_genes <-  gene_annotation[!grepl("^HBA|^HBB|^HBD|HBE1|HBE2|^HBG|^HBM|^RPS|^RPL|^MT-", gene_annotation$SYMBOL),1]

genes_to_keep <- genes %in% non_hb_ribo_genes

sum(genes_to_keep)
```

```{r}
dds_urban_diet_014 <- dds_urban_diet_014[genes_to_keep,]
```

**Number of genes after filtering is:** `r sum(genes_to_keep) `

# 6. DESeq calculations


```{r DESeq calculation urban diet 14 vs 0}
dds_urban_diet_014 <- DESeq(dds_urban_diet_014)
```



```{r dispresion urban diet 0 vs 14}
plotDispEsts(dds_urban_diet_014)
```
```{r}
summary(dds_urban_diet_014)
```



# 7. Normalized counts 

### Normalized count table
For inspection of the normalized data, we write the normalized counts into a data.frame called "norm_anno".
```{r normalized annotation urban diet 0 vs 14}
norm_anno <- as.data.frame(counts(dds_urban_diet_014, normalized=T))
  norm_anno$GENEID <- row.names(norm_anno)

  # add gene annotation extracted from the gtf file
  gene_annotation <- tx_annotation[!duplicated(tx_annotation$GENEID),c("GENEID", "SYMBOL", "GENETYPE")]
  gene_annotation <- gene_annotation[match(rownames(norm_anno), gene_annotation$GENEID), ]
  
biomart <- read.delim("/home/tal/data/Data/biomart_HumanGRCh38.p13_20191214.txt", stringsAsFactors = FALSE)


  idx <- match(unlist(lapply(strsplit(gene_annotation$GENEID, split = "[.]"), `[[`, 1)), biomart$Gene.stable.ID)
gene_annotation$DESCRIPTION <- biomart$Gene.description[idx]
gene_annotation$CHR <- biomart$Chromosome.scaffold.name[idx]

 # merge expression table and annotation
norm_anno <- merge(norm_anno,
                   gene_annotation,
                   by = "GENEID")
rownames(norm_anno) <- norm_anno$GENEID

norm_anno$GENEID_SYMBOL<-paste0(norm_anno$GENEID,":", norm_anno$SYMBOL)

norm_anno[1:3,c(1:2, (ncol(norm_anno)-5):ncol(norm_anno))]

  tmp <- list("gene_annotation" = gene_annotation,
              "norm_anno" = norm_anno)
  
norm_anno_urban_diet_014 <- norm_anno  
```


```{r}
head(norm_anno_urban_diet_014)
```





# 8. Variance stabilizing transformation



```{r varStab urban diet 0 vs 14}
dds_vst_urban_diet_014 <- vst(dds_urban_diet_014, blind = TRUE)
```



### plot dipresion
Plot row standard deviations versus row means
```{r meanSdPlot urban diet 0 vs 14, echo=TRUE}
meanSdPlot(as.matrix(assay(dds_vst_urban_diet_014)), ranks = FALSE)
```




# 9. DE analysis - urban diet 14 vs 0

## DE, alpha 0.2 

```{r}
# IHW
res_deseq_lfc_urban_diet_014.diet <- results(dds_urban_diet_014,
                               contrast = list("treatmentdiet.timepoint14d"),
                               lfcThreshold = 0,
                               alpha = 0.2,
                               filterFun = ihw,
                               altHypothesis = "greaterAbs")


# normal shrinkage ( had probklems with apglem )
res_deseq_lfc_urban_diet_014.diet <- lfcShrink(dds =  dds_urban_diet_014, 
                                   res = res_deseq_lfc_urban_diet_014.diet,
                                   coef= which(resultsNames(dds_urban_diet_014) == "treatmentdiet.timepoint14d"), 
                                   type="normal", 
                                  returnList = F
                                   )

res_deseq_lfc_urban_diet_014.diet
```
```{r}
# IHW
res_deseq_lfc_urban_diet_014.ctr <- results(dds_urban_diet_014,
                               contrast = list("treatmentctr.timepoint14d"),
                               lfcThreshold = 0,
                               alpha = 0.2,
                               filterFun = ihw,
                               altHypothesis = "greaterAbs")


# apeglm shrinkage
res_deseq_lfc_urban_diet_014.ctr <- lfcShrink(dds =  dds_urban_diet_014, 
                                   res = res_deseq_lfc_urban_diet_014.ctr,
                                   coef= which(resultsNames(dds_urban_diet_014) == "treatmentctr.timepoint14d"), 
                                   type="normal", 
                                  returnList = F
                                   )

res_deseq_lfc_urban_diet_014.ctr
```
```{r}
gc()
```

### contrast
```{r}
resultsNames(dds_urban_diet_014)
contrast_014 <- results(dds_urban_diet_014, contrast=list("treatmentctr.timepoint14d","treatmentdiet.timepoint14d"))

contrast_014$GENEID <- rownames(contrast_014)
contrast_014$SYMBOL <- norm_anno_urban_diet_014[match(contrast_014$GENEID, norm_anno_urban_diet_014$GENEID),"SYMBOL"]
```

```{r}
length(contrast_014[contrast_014$padj<0.2,])

contrast_014[contrast_014$padj<0.2,]
```


### DIET
```{r}
## add columns, GENEID, SYMBOL, Sig, regulation
res_deseq_lfc_urban_diet_014.diet$GENEID <- rownames(res_deseq_lfc_urban_diet_014.diet)
res_deseq_lfc_urban_diet_014.diet$SYMBOL <- norm_anno_urban_diet_014[match(res_deseq_lfc_urban_diet_014.diet$GENEID, norm_anno_urban_diet_014$GENEID),"SYMBOL"]
res_deseq_lfc_urban_diet_014.diet$significance <- ifelse(res_deseq_lfc_urban_diet_014.diet$padj <= 0.2, "sig", "n.s.")
res_deseq_lfc_urban_diet_014.diet$direction <- ifelse(res_deseq_lfc_urban_diet_014.diet$log2FoldChange >0, "up", "down")
res_deseq_lfc_urban_diet_014.diet$SYMBOL_GENEID <- paste0(res_deseq_lfc_urban_diet_014.diet$SYMBOL, "_", res_deseq_lfc_urban_diet_014.diet$GENEID)
```


```{r}
list_de_urban_diet_014_symbol.diet <- list(up = res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig" & res_deseq_lfc_urban_diet_014.diet$direction == "up","SYMBOL_GENEID"], 
                               down = res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig" & res_deseq_lfc_urban_diet_014.diet$direction == "down","SYMBOL_GENEID"])


list_de_urban_diet_014_symbol.diet
```


```{r}
lapply(list_de_urban_diet_014_symbol.diet, length)
```

```{r}
tmp_vst <- vst_anno_log_urban014[which(vst_anno_log_urban014$SYMBOL_GENEID %in% unique(unlist(list_de_urban_diet_014_symbol.diet))),which(colnames(vst_anno_log_urban014) %in% c(subset(sample_table_urban_0.14, treatment == "diet")$ID, "SYMBOL_GENEID"))]

rownames(tmp_vst) <- tmp_vst$SYMBOL_GENEID

tmp_vst <- tmp_vst[,which(colnames(tmp_vst) %in% sample_table_urban_0.14$ID)]
tmp_vst$SYMBOL_GENEID <- rownames(tmp_vst)

tmp_vst <- reshape2::melt(tmp_vst, var.id = "SYMBOL_GENEID") 

colnames(tmp_vst) <- c("SYMBOL_GENEID","ID","vst_exp")

tmp_vst$timepoint <- sample_table_urban_0.14[match(tmp_vst$ID, sample_table_urban_0.14$ID),"timepoint"]
tmp_vst$PID <- sample_table_urban_0.14[match(tmp_vst$ID, sample_table_urban_0.14$ID),"PID"]

```

color by direction
```{r fig.height=20, fig.width=20}
tmp_vst_direction <- tmp_vst %>% 
              group_by(SYMBOL_GENEID, PID) %>%
              summarize(delta = vst_exp - lag(vst_exp))

tmp_vst_direction <- as.data.frame(tmp_vst_direction)

tmp_vst_direction <- tmp_vst_direction[!is.na(tmp_vst_direction$delta),]
tmp_vst_direction$direction <- ifelse(tmp_vst_direction$delta>0,"down","up")              


tmp_vst_direction$symbol_pid <- paste0(tmp_vst_direction$SYMBOL_GENEID,"_",tmp_vst_direction$PID)


tmp_vst$symbol_pid <- paste0(tmp_vst$SYMBOL_GENEID,"_",tmp_vst$PID)

tmp_vst$direction <- tmp_vst_direction[match(tmp_vst$symbol_pid, tmp_vst_direction$symbol_pid),"direction"]

tmp_vst$label <- ifelse(as.character(tmp_vst$timepoint) == "14d" , as.character(tmp_vst$PID), NA)



```
```{r fig.height=18, fig.width=18}
tmp_vst$regulation <- ifelse(tmp_vst$SYMBOL_GENEID %in% list_de_urban_diet_014_symbol.diet$up , "up", "down")

tmp_vst$outlier <- ifelse(tmp_vst$direction == tmp_vst$regulation, "", "outlier")

numbe_outlier <- tmp_vst %>%
                group_by(PID) %>%
                summarize(n_outlier = sum(outlier == "outlier")/2) # divide by two bcs the number of the timepoints

numbe_outlier
```

heatmap
```{r fig.height=10, fig.width=10}
heatmap_mtx <- spread(tmp_vst[,c(1:3)], key = "SYMBOL_GENEID", value = "vst_exp") 
rownames(heatmap_mtx) <- heatmap_mtx$ID
heatmap_mtx$ID <- NULL

heatmap_mtx_scale <- t(scale(heatmap_mtx))

plot_anno <- sample_table_urban_0.14[,c("timepoint","PID", "treatment"), drop = F]

genes_anno <- as.data.frame(res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig",c("direction"), drop = F])
rownames(genes_anno) <- res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig",]$SYMBOL_GENEID

tmp_sample_table <- subset(sample_table_urban_0.14, treatment == "diet")

heatmap_mtx_scale <- heatmap_mtx_scale[,order(tmp_sample_table$timepoint, tmp_sample_table$PID, decreasing = F)]

pheatmap(heatmap_mtx_scale, cluster_rows = T,  
         cluster_cols = F, 
         annotation_colors = list(timepoint = col_timepoint, 
                                  direction =c( "up" = "tomato3", "down" = "cornflowerblue"), treatment = col_treatment),
         annotation_row = genes_anno,
         annotation_col = plot_anno, 
         show_colnames = F, fontsize = 3,
         breaks = scaleColors(data = heatmap_mtx_scale, maxvalue = 2)[["breaks"]],
           color = scaleColors(data = heatmap_mtx_scale, maxvalue = 2)[["color"]], 
         main = "Diet, urban diet 14 vs 0, alpha 0.2")
```

# 10. Enrichment
```{r}
# define universe
universe <- as.character(norm_anno_urban_diet_014$SYMBOL)
# change symbols to ENTREZ IDs (necessary for ClusterProfiler)
universe_Entrez <- bitr(universe, 
                        fromType="SYMBOL", 
                        toType="ENTREZID", 
                        OrgDb="org.Hs.eg.db")$ENTREZID

universe_Entrez_df<-bitr(universe, 
                        fromType="SYMBOL", 
                        toType="ENTREZID", 
                        OrgDb="org.Hs.eg.db")
```

```{r}
list_de_urban_diet_014_symbol.diet_SYMBOL <- list(up = res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig" & res_deseq_lfc_urban_diet_014.diet$log2FoldChange >0,"SYMBOL"], 
                               down = res_deseq_lfc_urban_diet_014.diet[res_deseq_lfc_urban_diet_014.diet$significance == "sig" & res_deseq_lfc_urban_diet_014.diet$log2FoldChange <0,"SYMBOL"])


GO_model_0vs14 <- DEGO(input = list(urban = list_de_urban_diet_014_symbol.diet_SYMBOL), p.cutoff = 0.05, show_cat = 50)
```

# 11. TF enrichment
 prediction of TF targets
```{r}
dir <- getwd()

up_urban_014_TFup <- TF_overrep(input = "", inputdata = list_de_urban_diet_014_symbol.diet_SYMBOL$up)

plot_TF_enrichment(overrep_results = up_urban_014_TFup, colorup = "tomato3", colordn = "cornflowerblue", input = "", source =  list_de_urban_diet_014_symbol.diet_SYMBOL$up, main_title = "list_de_urban_diet_014_symbol.diet_SYMBOL up")
```
